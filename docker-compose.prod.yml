version: '3.8'

x-logging: &log_limit
  logging:
    x-log-driver: 'json-file'
    x-log-opts:
      max-size: '1M'
      max-file: 3

services:
  # MCP Server
  mcp-server-claude:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-server-claude-prod
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - MCP_MODE=http
    env_file:
      - .env.production
    volumes:
      - ./workspace:/app/workspace
      - ./logs:/app/logs
    networks:
      - mcp-network
    depends_on:
      - mysql
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    <<: *log_limit

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: mcp-mysql-prod
    ports:
      - "3306:3306"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    <<: *log_limit

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mcp-redis-prod
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mcp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    command: redis-server --appendonly yes
    <<: *log_limit

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: mcp-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - mcp-network
    depends_on:
      - mcp-server-claude
    restart: unless-stopped
    profiles:
      - nginx

networks:
  mcp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local